on:
  workflow_dispatch:

name: Create Release with Placeholder Files

jobs:
  build:
    name: Create and Upload Release Asset
    runs-on: ubuntu-latest
    env:  # Define PLATFORMS as an environment variable
      PLATFORMS: "qemu-aarch64-virt"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # - name: Build Initramfs for each platform
    #   run: |
    #     # Loop through platforms to build initramfs
    #     for PLATFORM in $PLATFORMS; do
    #       # Set architecture and platform-specific parameters
    #       if [ "$PLATFORM" == "qemu-aarch64-virt" ]; then
    #         ARCH="aarch64"
    #       elif [ "$PLATFORM" == "qemu-riscv64-virt" ]; then
    #         ARCH="riscv64"
    #       fi
          
    #       # Export platform and architecture variables for Makefile
    #       export PLATFORM
    #       export ARCH
          
    #       # Build initramfs using the Makefile (Buildroot step)
    #       echo "Building Initramfs for $PLATFORM"
    #       make PLATFORM=$PLATFORM ARCH=$ARCH buildroot  # This will build the rootfs.cpio file
          
    #       # Compress the initramfs placeholder into a .tar.gz file
    #       tar -czf "initramfs_${PLATFORM}.tar.gz" "wrkdir/rootfs_${PLATFORM}.cpio"
    #     done

    - name: Build Kernel Image for each platform
      run: |
        # Loop through platforms to build kernel image
        for PLATFORM in $PLATFORMS; do
          # Set architecture and platform-specific parameters
          if [ "$PLATFORM" == "qemu-aarch64-virt" ]; then
            ARCH="aarch64"
          elif [ "$PLATFORM" == "qemu-riscv64-virt" ]; then
            ARCH="riscv64"
          fi
          
          # Export platform and architecture variables for Makefile
          export PLATFORM
          export ARCH
          
          # Build the kernel image using the Makefile (Linux step)
          echo "Building Kernel Image for $PLATFORM"
          make PLATFORM=$PLATFORM ARCH=$ARCH linux  # This will build the kernel Image
          
          # Compress the kernel image placeholder into a .tar.gz file
          tar -czf "Image-${PLATFORM}.tar.gz" "wrkdir/Image-${PLATFORM}"
        done

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    - name: Upload Release Assets
      id: upload-release-assets
      run: |
        # Loop through platforms and upload corresponding files
        for PLATFORM in $PLATFORMS; do
          # Upload initramfs tarball
          echo "Uploading initramfs_${PLATFORM}.tar.gz"
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @"initramfs_${PLATFORM}.tar.gz" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=initramfs_${PLATFORM}.tar.gz"

          # Upload kernel image tarball
          echo "Uploading Image-${PLATFORM}.tar.gz"
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @"Image-${PLATFORM}.tar.gz" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=Image-${PLATFORM}.tar.gz"
        done
